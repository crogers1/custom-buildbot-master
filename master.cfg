#-*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

repos = ['blktap', 'bootage', 'dm-agent', 'dm-wrapper', 'fbtap', 'gene3fs', 'icbinn', 'idl', 'input', 'installer', 'ioemu', 'libedid', 'libpciemu', 'libxcdbus', 'libxenbackend', 'manager', 'meta-selinux','msi-installer', 'network', 'ocaml', 'openxt', 'polmod-example', 'pv-linux-drivers', 'qemu-dm', 'resized', 'sdk', 'seabios', 'selinux-policy', 'surfman', 'sync-cli', 'sync-client', 'sync-database', 'sync- server', 'sync-ui-helper', 'sync-wui', 'toolstack', 'toolstack-data', 'uid', 'v4v', 'win-tools', 'xblanker', 'xclibs', 'xctools', 'xc-vusb', 'xc-vusb-daemon', 'xc-windows', 'xenaccess', 'xenclient-oe', 'xenclient-oe-extra', 'xenfb2', 'xsm-policy']
# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("buildslave1", "password", max_builds=1)] 

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()


#from buildbot.changes.gitpoller import GitPoller
#pollers = []

#for repo in repos:
#	pollers.append(GitPoller(repourl='git://github.com/openxt/%s.git'%repo,
#						 branches=['master'], category='openxt',
#						 project=repo))
#pollers.append(GitPoller(repourl='git://github.com/crogers1/xclibs.git',
#					 branches=['master'], category='openxt',
#					 project='xclibs.git',
#					 pollInterval=60))
#c['change_source'] = pollers
c['change_source'] = []

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

# If you wat to use SVNPoller, it might look something like
#  # Where to get source code changes
# from buildbot.changes.svnpoller import SVNPoller
# source_code_svn_url='https://svn.myproject.org/bluejay/trunk'
# svn_poller = SVNPoller(
#                    svnurl=source_code_svn_url,
#                    pollinterval=60*60, # seconds
#                    histmax=10,
#                    svnbin='/usr/bin/svn',
## )
# c['sources'] = [ svn_poller ]

####### SCHEDULERS

## configure the Schedulers

from buildbot.schedulers.forcesched import *
c['schedulers'] = []
prop = []

#prop.append(ChoiceStringParameter(name="branch",choices=["master","dev"],default="master"))
#prop.append(BooleanParameter(name="force_clean",default=False,label="Start with a clean build."))
for repo in repos:
	prop.append(StringParameter(name=repo+"url", label=repo+" URL: <br>", default="", size=40))
#	prop.append(StringParameter(name=repo+"srcrev", label="SRCREV: <br>", default="", size=40))

myfs = ForceScheduler(name="force",
                	 builderNames=["extbuilder"],
					 branch=StringParameter(name="branch",default="master"),
					 properties=prop)

c['schedulers'].append(myfs)

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes.filter import ChangeFilter
from buildbot.schedulers import timed


#c['schedulers'].append(timed.Nightly(
#		name='nightly-qemu',
#		branch="master",
#		builderNames=["extbuilder"],
#		hour=0,
#		minute=42))


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['bots'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

#cvsroot = ":pserver:anonymous@cvs.sourceforge.net:/cvsroot/buildbot"
#cvsmodule = "buildbot"

from buildbot.process.factory import BuildFactory
#from buildbot.steps.source import CVS
from buildbot.steps.shell import Compile
from buildbot.steps.python_twisted import Trial
from buildbot.process.properties import Property
f1 = BuildFactory()
f1.addStep(Compile(command=["bash", "-e", "./fetch.sh", Property('buildnumber')], name="Fetch", timeout=12000, description="Fetch", descriptionDone="Fetched"))
f1.addStep(Compile(command=["bash", "-e", "./clean.sh"], name="Clean", timeout=12000, description="Clean", descriptionDone="Cleaned"))
f1.addStep(Compile(command=["bash", "-e", "./build.sh", Property('buildnumber'), Property('branch'),Property('layers'), Property('repos')], name="Build", timeout=12000, description="Build", descriptionDone="Built"))
f1.addStep(Compile(command=["bash", "-e", "./copy.sh", Property('buildnumber'), Property('branch')],  name="Copy",  timeout=12000, description="Copy",  descriptionDone="Copied"))
#f1.addStep(CVS(cvsroot=cvsroot, cvsmodule=cvsmodule, login="", mode="copy"))
#f1.addStep(Compile(command=["python", "./setup.py", "build"]))
#f1.addStep(Trial(testChanges=True, testpath="."))

b1 = {'name': "extbuilder",
      'slavenames': ["buildslave1"],
      'builddir': "/home/build/builder",
      'factory': f1,
      }

c['builders'] = [b1]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# Use allowForce=True (boolean, not a string. ie: not 'True') to allow
# Forcing Builds in the Web User Interface. The default is False.
# from buildbot.status import html
# c['status'].append(html.WebStatus(http_port=8010,allowForce=True))

from buildbot.status import html
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import HTPasswdAuth

authz = Authz(auth=HTPasswdAuth('/var/lib/buildbot/master/statusauth'),
				forceBuild='auth', stopBuild='auth', 
				pingBuilder=True, cancelPendingBuild='auth',
				cleanShutdown='auth', cancelAllPendingBuilds='auth',
				stopAllBuilds='auth', gracefulShutdown='auth', forceAllBuilds='auth',
				pauseSlave='auth')

c['status'].append(html.WebStatus(http_port=8010,authz=authz))

#from buildbot.status.github import GitHubStatus

#repoOwner = Interpolate("%(prop:github_repo_owner)s")
#repoName = Interpolate("%(prop:github_repo_name)s")
#sha = Interpolate("%(src::revision)s")
#gs = GitHubStatus(token='githubAPIToken',
#                  repoOwner=repoOwner,
#                  repoName=repoName,
#                  sha=sha,
#                  startDescription='Build started.',
#                  endDescription='Build done.',
#                  )
#c['status'].append(gs)

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "OpenXT"
c['projectURL'] = "https://github.com/OpenXT"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

c['buildCacheSize'] = 30
